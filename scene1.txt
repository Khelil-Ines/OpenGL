#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <shader_s.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <iostream>
#include <cmath> // Include for sin function

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);

// settings
const unsigned int SCR_WIDTH = 871;
const unsigned int SCR_HEIGHT = 438;

int main()
{
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // uncomment this statement to fix compilation on OS X
#endif

    // glfw window creation
    // --------------------
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Ben and Jerry's - Ines Khelil", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    // glad: load all OpenGL function pointers
    // ---------------------------------------
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    // Enable blending
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    // build and compile our shader program
    // ------------------------------------
    Shader ourShader("D:/Fichiers/4.1.texture.vs", "D:/Fichiers/4.1.texture.fs");

    // set up vertex data (and buffer(s)) and configure vertex attributes
    // ------------------------------------------------------------------
    float vertices[] = {
        // positions          // texture coords
        // Full-width background quad
        -1.0f, -1.0f, 0.0f,  0.0f, 0.0f, // bottom left
         1.0f, -1.0f, 0.0f,  1.0f, 0.0f, // bottom right
         1.0f,  1.0f, 0.0f,  1.0f, 1.0f, // top right
        -1.0f,  1.0f, 0.0f,  0.0f, 1.0f, // top left
        // Top-right corner quad
         0.5f,  1.0f, 0.1f,  0.0f, 0.0f, // top left
         1.0f,  1.0f, 0.1f,  1.0f, 0.0f, // top right
         1.0f,  0.5f, 0.1f,  1.0f, 1.0f, // bottom right
         0.5f,  0.5f, 0.1f,  0.0f, 1.0f, // bottom left
        // Car image quad 
        -0.9f, -0.9f, 0.2f,  0.0f, 0.0f, // bottom left
        -0.2f, -0.9f, 0.2f,  1.0f, 0.0f, // bottom right
        -0.2f, -0.2f, 0.2f,  1.0f, 1.0f, // top right
        -0.9f, -0.2f, 0.2f,  0.0f, 1.0f, // top left
        // Logo image quad 
        -0.4f,  0.5f, 0.3f,  0.0f, 0.0f, // bottom left
         0.4f,  0.5f, 0.3f,  1.0f, 0.0f, // bottom right
         0.4f,  1.0f, 0.3f,  1.0f, 1.0f, // top right
        -0.4f,  1.0f, 0.3f,  0.0f, 1.0f, // top left
        // Sun image quad 
        -1.0f,  0.2f, 0.4f,  0.0f, 0.0f, // bottom left
        -0.4f,  0.2f, 0.4f,  1.0f, 0.0f, // bottom right
        -0.4f,  1.0f, 0.4f,  1.0f, 1.0f, // top right
        -1.0f,  1.0f, 0.4f,  0.0f, 1.0f, // top left
        // Nuage image quad (on top of the sun)
        -1.0f,  0.2f, 0.5f,  0.0f, 0.0f, // bottom left
        -0.4f,  0.2f, 0.5f,  1.0f, 0.0f, // bottom right
        -0.4f,  0.8f, 0.5f,  1.0f, 1.0f, // top right
        -1.0f,  0.8f, 0.5f,  0.0f, 1.0f,  // top left
      // Nike image quad 
        0.0f, -1.0f, 0.6f,  0.0f, 0.0f, // bottom left
        0.9f, -1.0f, 0.6f,  1.0f, 0.0f, // bottom right
        0.9f, -0.3f, 0.6f,  1.0f, 1.0f, // top right
        0.0f, -0.3f, 0.6f,  0.0f, 1.0f, // top left
        // Fleche image quad 
        -0.1f, -0.3f, 0.7f,  0.0f, 0.0f, // bottom left
        0.3f, -0.3f, 0.7f,  1.0f, 0.0f, // bottom right
        0.3f,  0.1f, 0.7f,  1.0f, 1.0f, // top right
        -0.1f,  0.1f, 0.7f,  0.0f, 1.0f,  // top left
       // New image quad 
        -0.4f,  0.0f, 0.8f,  0.0f, 0.0f, // bottom left
         0.2f,  0.0f, 0.8f,  1.0f, 0.0f, // bottom right
         0.2f,  0.4f, 0.8f,  1.0f, 1.0f, // top right
        -0.4f,  0.4f, 0.8f,  0.0f, 1.0f  // top left
    };
    unsigned int indices[] = {
        // Background quad
        0, 1, 3, 1, 2, 3,
        // Top-right corner quad
        4, 5, 7, 5, 6, 7,
        // Car image quad
        8, 9, 11, 9, 10, 11,
        // Logo image quad
        12, 13, 15, 13, 14, 15,
        // Sun image quad
        16, 17, 19, 17, 18, 19,
        // Nuage image quad
        20, 21, 23, 21, 22, 23,
        // Nike image quad
        24, 25, 27, 25, 26, 27,
        // Fleche image quad
        28, 29, 31, 29, 30, 31,
        // New image quad
        32, 33, 35, 33, 34, 35
    };

    unsigned int VBO, VAO, EBO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    glGenBuffers(1, &EBO);

    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    // position attribute
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    // texture coord attribute
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    // load and create textures
    // -------------------------
    unsigned int textures[9];
    glGenTextures(9, textures);

    const char* imageFiles[9] = {
        "D:/Fichiers/icecream4.png", // Background image
        "D:/Fichiers/vache.png", // Top-right corner image
        "D:/Fichiers/vroum.png", // Car image
        "D:/Fichiers/logo.png",   // Logo image
        "D:/Fichiers/soleil.png",  // Sun image
        "D:/Fichiers/nuage.png", // Nuage image
        "D:/Fichiers/nike.png",  // Nike image
        "D:/Fichiers/fleche.png", // Fleche image
        "D:/Fichiers/new.png" // New image
    };

    for (int i = 0; i < 9; i++) {
        glBindTexture(GL_TEXTURE_2D, textures[i]);
        // set the texture wrapping parameters
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
        // set texture filtering parameters
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        // load image, create texture and generate mipmaps
        int width, height, nrChannels;
        stbi_set_flip_vertically_on_load(true); // flip the image vertically
        unsigned char* data = stbi_load(imageFiles[i], &width, &height, &nrChannels, 0);
        if (data)
        {
            GLenum format = (nrChannels == 4) ? GL_RGBA : GL_RGB;
            glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data);
            glGenerateMipmap(GL_TEXTURE_2D);
        }
        else
        {
            std::cout << "Failed to load texture: " << imageFiles[i] << std::endl;
        }
        stbi_image_free(data);
    }

    // render loop
    // -----------
    ourShader.use();
    glUniform1i(glGetUniformLocation(ourShader.ID, "texture1"), 0);

    float rotationAngle = 0.0f;
    const float rotations = 5.0f;
    const float rotationSpeed = glm::radians(360.0f * rotations); 
    float startTime = (float)glfwGetTime();

    while (!glfwWindowShouldClose(window))
    {
        // input
        // -----
        processInput(window);

        // render
        // ------
        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        glBindVertexArray(VAO);

        // Render background without transformation
        glUniform1i(glGetUniformLocation(ourShader.ID, "applyTransform"), GL_FALSE);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, textures[0]);
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

        // Render top-right corner with rotation
        glUniform1i(glGetUniformLocation(ourShader.ID, "applyTransform"), GL_TRUE);
        glBindTexture(GL_TEXTURE_2D, textures[1]);

        float currentTime = (float)glfwGetTime();
        float elapsedTime = currentTime - startTime;

        glm::mat4 transform = glm::mat4(1.0f);

        if (elapsedTime <= rotations) {
            // Rotate for the first 5 rotations
            rotationAngle = rotationSpeed * elapsedTime;
        }
        else {
            // Stop rotating and apply upside-down transformation
            rotationAngle = glm::radians(180.0f); // 180 degrees to flip upside down
        }

        transform = glm::translate(transform, glm::vec3(0.75f, 0.75f, 0.0f)); // Translate to the top-right corner
        transform = glm::rotate(transform, rotationAngle, glm::vec3(0.0f, 0.0f, 1.0f));
        transform = glm::translate(transform, glm::vec3(-0.75f, -0.75f, 0.0f)); // Translate back

        unsigned int transformLoc = glGetUniformLocation(ourShader.ID, "transform");
        glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(transform));

        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, (void*)(6 * sizeof(unsigned int)));

        // Render car image without transformation
        glUniform1i(glGetUniformLocation(ourShader.ID, "applyTransform"), GL_FALSE);
        glBindTexture(GL_TEXTURE_2D, textures[2]);
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, (void*)(12 * sizeof(unsigned int)));

        // Render logo without transformation (centered at the top)
        glBindTexture(GL_TEXTURE_2D, textures[3]);

        transform = glm::mat4(1.0f);
        transform = glm::translate(transform, glm::vec3(0.0f, 0.0f, 0.0f)); // Centered at the top
        transform = glm::scale(transform, glm::vec3(1.5f, 1.5f, 1.0f)); // Scale to make it larger

        glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(transform));
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, (void*)(18 * sizeof(unsigned int)));

        // Render sun image without transformation 
        glBindTexture(GL_TEXTURE_2D, textures[4]);
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, (void*)(24 * sizeof(unsigned int)));

        // Render nuage with low opacity on top of sun image
        glBindTexture(GL_TEXTURE_2D, textures[5]);

        glUniform1f(glGetUniformLocation(ourShader.ID, "alpha"), 0.7f); // Set alpha value to 0.7
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, (void*)(30 * sizeof(unsigned int)));
        glUniform1f(glGetUniformLocation(ourShader.ID, "alpha"), 1.0f); // Reset alpha value to 1.0

        // Render nike image without transformation
        glBindTexture(GL_TEXTURE_2D, textures[6]);
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, (void*)(36 * sizeof(unsigned int)));

        // Calculate the alpha value for blinking effect
        float alphaValue = (sin(currentTime * 6.0f) + 1.0f) / 2.0f; // Oscillates between 0.0 and 1.0

        // Render fleche image with blinking effect 
        glBindTexture(GL_TEXTURE_2D, textures[7]);
        glUniform1f(glGetUniformLocation(ourShader.ID, "alpha"), alphaValue); // Set alpha value for blinking
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, (void*)(42 * sizeof(unsigned int)));
        glUniform1f(glGetUniformLocation(ourShader.ID, "alpha"), 1.0f); // Reset alpha value to 1.0

        // Render new image without transformation
        glBindTexture(GL_TEXTURE_2D, textures[8]);
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, (void*)(48 * sizeof(unsigned int)));

        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        // -------------------------------------------------------------------------------
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // de-allocate all resources once they've outlived their purpose:
    // ------------------------------------------------------------------------
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteBuffers(1, &EBO);

    // glfw: terminate, clearing all previously allocated GLFW resources.
    // ------------------------------------------------------------------
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    // make sure the viewport matches the new window dimensions; note that width and 
    // height will be significantly larger than specified on retina displays.
    glViewport(0, 0, width, height);
}
